---
GENERATOR: 
  PackageName: cuda_runtime
  PackageDescription: "Package runtime provides Go bindings"
  PackageLicense: "THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS."
  SysIncludes: ["cuda.h", "cuda_runtime.h", "cuda_runtime_api.h", "driver_types.h"]
  FlagGroups:
    - {name: LDFLAGS, flags: [-L/usr/local/cuda/lib64 -lcudart]}
    - {name: CFLAGS, flags: [-I /usr/local/cuda/include]}
PARSER: 
  IncludePaths: ["/usr/local/cuda/include"]
  SourcesPaths: ["cuda.h", "cuda_runtime.h", "cuda_runtime_api.h", "driver_types.h"]
TRANSLATOR: 
  ConstCharIsString: true
  ConstUCharIsString: false
  ConstRules: 
    defines: eval
    enum: eval
  Rules:
    global:
      - {action: accept, from: "cudaError"}
      - {action: accept, from: "cudaMemcpyKind"}
      - {action: accept, from: "CUstream_st"}
      # - {transform: export}
    const:
      - {action: accept, from: "cudaEventWaitDefault"}
      - {action: accept, from: "cudaEventWaitExternal"}
      - {action: accept, from: "cudaStreamDefault"}
      - {action: accept, from: "cudaStreamNonBlocking"}
    type:
      - {action: accept, from: "cudaStream_t"}
      - {action: accept, from: "cudaEvent_t"}
    function:
      # memory management
      - {action: accept, from: "^cudaFree$"}
      - {action: accept, from: "^cudaMalloc$"}
      - {action: accept, from: "^cudaMemcpy$"}
      - {action: accept, from: "^cudaMemcpyAsync$"}
      - {action: accept, from: "^cudaMemset$"}
      - {action: accept, from: "^cudaMemsetAsync$"}
      # device management
      - {action: accept, from: "^cudaSetDevice$"}
      # error handling
      - {action: accept, from: "^cudaGetLastError$"}
      # stream management
      - {action: accept, from: "^cudaStreamCreate$"}
      - {action: accept, from: "^cudaStreamCreateWithFlags$"}
      - {action: accept, from: "^cudaStreamDestroy$"}
      - {action: accept, from: "^cudaStreamQuery$"}
      - {action: accept, from: "^cudaStreamSynchronize$"}
      - {action: accept, from: "^cudaStreamWaitEvent$"}
      # Stream Ordered Memory Allocator
      - {action: accept, from: "^cudaFreeAsync$"}
      - {action: accept, from: "^cudaMallocAsync$"}

      - {transform: export}
    post-global: 
      - {load: snakecase}
  PtrTips:
    any:
      - {target: cudaStream_t, self: ref}
      
