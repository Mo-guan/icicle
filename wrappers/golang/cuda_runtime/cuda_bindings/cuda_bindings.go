// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Wed, 24 Jan 2024 15:49:59 IST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package cuda_bindings

/*
#cgo LDFLAGS: -L/usr/local/cuda/lib64 -lcudart
#cgo CFLAGS: -I /usr/local/cuda/include
#include <cuda.h>
#include <cuda_runtime.h>
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"runtime"
	"unsafe"
)

// CudaGetLastError function as declared in include/cuda_runtime_api.h:1305
func CudaGetLastError() CudaErrorT {
	__ret := C.cudaGetLastError()
	__v := (CudaErrorT)(__ret)
	return __v
}

// CudaSetDevice function as declared in include/cuda_runtime_api.h:2185
func CudaSetDevice(Device int32) CudaErrorT {
	cDevice, cDeviceAllocMap := (C.int)(Device), cgoAllocsUnknown
	__ret := C.cudaSetDevice(cDevice)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (CudaErrorT)(__ret)
	return __v
}

// CudaStreamCreate function as declared in include/cuda_runtime_api.h:2393
func CudaStreamCreate(PStream *CudaStream) CudaErrorT {
	cPStream, cPStreamAllocMap := (*C.struct_CUstream_st)(unsafe.Pointer(PStream)), cgoAllocsUnknown
	__ret := C.cudaStreamCreate(cPStream)
	runtime.KeepAlive(cPStreamAllocMap)
	__v := (CudaErrorT)(__ret)
	return __v
}

// CudaStreamCreateWithFlags function as declared in include/cuda_runtime_api.h:2425
func CudaStreamCreateWithFlags(PStream *CudaStream, Flags uint32) CudaErrorT {
	cPStream, cPStreamAllocMap := (*C.struct_CUstream_st)(unsafe.Pointer(PStream)), cgoAllocsUnknown
	cFlags, cFlagsAllocMap := (C.uint)(Flags), cgoAllocsUnknown
	__ret := C.cudaStreamCreateWithFlags(cPStream, cFlags)
	runtime.KeepAlive(cFlagsAllocMap)
	runtime.KeepAlive(cPStreamAllocMap)
	__v := (CudaErrorT)(__ret)
	return __v
}

// CudaStreamDestroy function as declared in include/cuda_runtime_api.h:2676
func CudaStreamDestroy(Stream CudaStream) CudaErrorT {
	cStream, cStreamAllocMap := *(*C.struct_CUstream_st)(unsafe.Pointer(&Stream)), cgoAllocsUnknown
	__ret := C.cudaStreamDestroy(cStream)
	runtime.KeepAlive(cStreamAllocMap)
	__v := (CudaErrorT)(__ret)
	return __v
}

// CudaStreamWaitEvent function as declared in include/cuda_runtime_api.h:2707
func CudaStreamWaitEvent(Stream CudaStream, Event CudaEvent, Flags uint32) CudaErrorT {
	cStream, cStreamAllocMap := *(*C.struct_CUstream_st)(unsafe.Pointer(&Stream)), cgoAllocsUnknown
	cEvent, cEventAllocMap := *(*C.struct_CUevent_st)(unsafe.Pointer(&Event)), cgoAllocsUnknown
	cFlags, cFlagsAllocMap := (C.uint)(Flags), cgoAllocsUnknown
	__ret := C.cudaStreamWaitEvent(cStream, cEvent, cFlags)
	runtime.KeepAlive(cFlagsAllocMap)
	runtime.KeepAlive(cEventAllocMap)
	runtime.KeepAlive(cStreamAllocMap)
	__v := (CudaErrorT)(__ret)
	return __v
}

// CudaStreamSynchronize function as declared in include/cuda_runtime_api.h:2806
func CudaStreamSynchronize(Stream CudaStream) CudaErrorT {
	cStream, cStreamAllocMap := *(*C.struct_CUstream_st)(unsafe.Pointer(&Stream)), cgoAllocsUnknown
	__ret := C.cudaStreamSynchronize(cStream)
	runtime.KeepAlive(cStreamAllocMap)
	__v := (CudaErrorT)(__ret)
	return __v
}

// CudaStreamQuery function as declared in include/cuda_runtime_api.h:2831
func CudaStreamQuery(Stream CudaStream) CudaErrorT {
	cStream, cStreamAllocMap := *(*C.struct_CUstream_st)(unsafe.Pointer(&Stream)), cgoAllocsUnknown
	__ret := C.cudaStreamQuery(cStream)
	runtime.KeepAlive(cStreamAllocMap)
	__v := (CudaErrorT)(__ret)
	return __v
}

// CudaMalloc function as declared in include/cuda_runtime_api.h:5207
func CudaMalloc(DevPtr *unsafe.Pointer, Size uint64) CudaErrorT {
	cDevPtr, cDevPtrAllocMap := DevPtr, cgoAllocsUnknown
	cSize, cSizeAllocMap := (C.size_t)(Size), cgoAllocsUnknown
	__ret := C.cudaMalloc(cDevPtr, cSize)
	runtime.KeepAlive(cSizeAllocMap)
	runtime.KeepAlive(cDevPtrAllocMap)
	__v := (CudaErrorT)(__ret)
	return __v
}

// CudaFree function as declared in include/cuda_runtime_api.h:5377
func CudaFree(DevPtr unsafe.Pointer) CudaErrorT {
	cDevPtr, cDevPtrAllocMap := DevPtr, cgoAllocsUnknown
	__ret := C.cudaFree(cDevPtr)
	runtime.KeepAlive(cDevPtrAllocMap)
	__v := (CudaErrorT)(__ret)
	return __v
}

// CudaMemcpy function as declared in include/cuda_runtime_api.h:6582
func CudaMemcpy(Dst unsafe.Pointer, Src unsafe.Pointer, Count uint64, Kind C.enum_) CudaErrorT {
	cDst, cDstAllocMap := Dst, cgoAllocsUnknown
	cSrc, cSrcAllocMap := Src, cgoAllocsUnknown
	cCount, cCountAllocMap := (C.size_t)(Count), cgoAllocsUnknown
	cKind, cKindAllocMap := (C.enum_)(Kind), cgoAllocsUnknown
	__ret := C.cudaMemcpy(cDst, cSrc, cCount, cKind)
	runtime.KeepAlive(cKindAllocMap)
	runtime.KeepAlive(cCountAllocMap)
	runtime.KeepAlive(cSrcAllocMap)
	runtime.KeepAlive(cDstAllocMap)
	__v := (CudaErrorT)(__ret)
	return __v
}

// CudaMemcpyAsync function as declared in include/cuda_runtime_api.h:6956
func CudaMemcpyAsync(Dst unsafe.Pointer, Src unsafe.Pointer, Count uint64, Kind C.enum_, Stream CudaStream) CudaErrorT {
	cDst, cDstAllocMap := Dst, cgoAllocsUnknown
	cSrc, cSrcAllocMap := Src, cgoAllocsUnknown
	cCount, cCountAllocMap := (C.size_t)(Count), cgoAllocsUnknown
	cKind, cKindAllocMap := (C.enum_)(Kind), cgoAllocsUnknown
	cStream, cStreamAllocMap := *(*C.struct_CUstream_st)(unsafe.Pointer(&Stream)), cgoAllocsUnknown
	__ret := C.cudaMemcpyAsync(cDst, cSrc, cCount, cKind, cStream)
	runtime.KeepAlive(cStreamAllocMap)
	runtime.KeepAlive(cKindAllocMap)
	runtime.KeepAlive(cCountAllocMap)
	runtime.KeepAlive(cSrcAllocMap)
	runtime.KeepAlive(cDstAllocMap)
	__v := (CudaErrorT)(__ret)
	return __v
}

// CudaMemset function as declared in include/cuda_runtime_api.h:7300
func CudaMemset(DevPtr unsafe.Pointer, Value int32, Count uint64) CudaErrorT {
	cDevPtr, cDevPtrAllocMap := DevPtr, cgoAllocsUnknown
	cValue, cValueAllocMap := (C.int)(Value), cgoAllocsUnknown
	cCount, cCountAllocMap := (C.size_t)(Count), cgoAllocsUnknown
	__ret := C.cudaMemset(cDevPtr, cValue, cCount)
	runtime.KeepAlive(cCountAllocMap)
	runtime.KeepAlive(cValueAllocMap)
	runtime.KeepAlive(cDevPtrAllocMap)
	__v := (CudaErrorT)(__ret)
	return __v
}

// CudaMemsetAsync function as declared in include/cuda_runtime_api.h:7416
func CudaMemsetAsync(DevPtr unsafe.Pointer, Value int32, Count uint64, Stream CudaStream) CudaErrorT {
	cDevPtr, cDevPtrAllocMap := DevPtr, cgoAllocsUnknown
	cValue, cValueAllocMap := (C.int)(Value), cgoAllocsUnknown
	cCount, cCountAllocMap := (C.size_t)(Count), cgoAllocsUnknown
	cStream, cStreamAllocMap := *(*C.struct_CUstream_st)(unsafe.Pointer(&Stream)), cgoAllocsUnknown
	__ret := C.cudaMemsetAsync(cDevPtr, cValue, cCount, cStream)
	runtime.KeepAlive(cStreamAllocMap)
	runtime.KeepAlive(cCountAllocMap)
	runtime.KeepAlive(cValueAllocMap)
	runtime.KeepAlive(cDevPtrAllocMap)
	__v := (CudaErrorT)(__ret)
	return __v
}

// CudaMallocAsync function as declared in include/cuda_runtime_api.h:8314
func CudaMallocAsync(DevPtr []unsafe.Pointer, Size uint64, HStream CudaStream) CudaErrorT {
	cDevPtr, cDevPtrAllocMap := copyPPointerBytes((*sliceHeader)(unsafe.Pointer(&DevPtr)))
	cSize, cSizeAllocMap := (C.size_t)(Size), cgoAllocsUnknown
	cHStream, cHStreamAllocMap := *(*C.struct_CUstream_st)(unsafe.Pointer(&HStream)), cgoAllocsUnknown
	__ret := C.cudaMallocAsync(cDevPtr, cSize, cHStream)
	runtime.KeepAlive(cHStreamAllocMap)
	runtime.KeepAlive(cSizeAllocMap)
	runtime.KeepAlive(cDevPtrAllocMap)
	__v := (CudaErrorT)(__ret)
	return __v
}

// CudaFreeAsync function as declared in include/cuda_runtime_api.h:8340
func CudaFreeAsync(DevPtr unsafe.Pointer, HStream CudaStream) CudaErrorT {
	cDevPtr, cDevPtrAllocMap := DevPtr, cgoAllocsUnknown
	cHStream, cHStreamAllocMap := *(*C.struct_CUstream_st)(unsafe.Pointer(&HStream)), cgoAllocsUnknown
	__ret := C.cudaFreeAsync(cDevPtr, cHStream)
	runtime.KeepAlive(cHStreamAllocMap)
	runtime.KeepAlive(cDevPtrAllocMap)
	__v := (CudaErrorT)(__ret)
	return __v
}
