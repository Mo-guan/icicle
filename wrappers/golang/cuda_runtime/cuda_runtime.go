// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Wed, 27 Dec 2023 15:18:21 IST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package cuda_runtime

/*
#cgo LDFLAGS: -L/usr/local/cuda/lib64 -lcudart
#cgo CFLAGS: -I /usr/local/cuda/include
#include <cuda.h>
#include <cuda_runtime.h>
#include <cuda_runtime_api.h>
#include <driver_types.h>
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"runtime"
	"unsafe"
)

// CudaGetLastError function as declared in include/cuda_runtime_api.h:1297
func CudaGetLastError() cudaErrorT {
	__ret := C.cudaGetLastError()
	__v := (cudaErrorT)(__ret)
	return __v
}

// CudaSetDevice function as declared in include/cuda_runtime_api.h:2177
func CudaSetDevice(device int32) cudaErrorT {
	cdevice, cdeviceAllocMap := (C.int)(device), cgoAllocsUnknown
	__ret := C.cudaSetDevice(cdevice)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (cudaErrorT)(__ret)
	return __v
}

// CudaStreamCreate function as declared in include/cuda_runtime_api.h:2381
func CudaStreamCreate(pStream []CUstreamSt) cudaErrorT {
	cpStream, cpStreamAllocMap := copyPStructCUstreamStBytes((*sliceHeader)(unsafe.Pointer(&pStream)))
	__ret := C.cudaStreamCreate(cpStream)
	runtime.KeepAlive(cpStreamAllocMap)
	__v := (cudaErrorT)(__ret)
	return __v
}

// CudaStreamCreateWithFlags function as declared in include/cuda_runtime_api.h:2413
func CudaStreamCreateWithFlags(pStream []CUstreamSt, flags uint32) cudaErrorT {
	cpStream, cpStreamAllocMap := copyPStructCUstreamStBytes((*sliceHeader)(unsafe.Pointer(&pStream)))
	cflags, cflagsAllocMap := (C.uint)(flags), cgoAllocsUnknown
	__ret := C.cudaStreamCreateWithFlags(cpStream, cflags)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(cpStreamAllocMap)
	__v := (cudaErrorT)(__ret)
	return __v
}

// CudaStreamDestroy function as declared in include/cuda_runtime_api.h:2662
func CudaStreamDestroy(stream CUstreamSt) cudaErrorT {
	cstream, cstreamAllocMap := *(*C.struct_CUstream_st)(unsafe.Pointer(&stream)), cgoAllocsUnknown
	__ret := C.cudaStreamDestroy(cstream)
	runtime.KeepAlive(cstreamAllocMap)
	__v := (cudaErrorT)(__ret)
	return __v
}

// CudaStreamWaitEvent function as declared in include/cuda_runtime_api.h:2693
func CudaStreamWaitEvent(stream CUstreamSt, event CUeventSt, flags uint32) cudaErrorT {
	cstream, cstreamAllocMap := *(*C.struct_CUstream_st)(unsafe.Pointer(&stream)), cgoAllocsUnknown
	cevent, ceventAllocMap := *(*C.struct_CUevent_st)(unsafe.Pointer(&event)), cgoAllocsUnknown
	cflags, cflagsAllocMap := (C.uint)(flags), cgoAllocsUnknown
	__ret := C.cudaStreamWaitEvent(cstream, cevent, cflags)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(ceventAllocMap)
	runtime.KeepAlive(cstreamAllocMap)
	__v := (cudaErrorT)(__ret)
	return __v
}

// CudaStreamSynchronize function as declared in include/cuda_runtime_api.h:2792
func CudaStreamSynchronize(stream CUstreamSt) cudaErrorT {
	cstream, cstreamAllocMap := *(*C.struct_CUstream_st)(unsafe.Pointer(&stream)), cgoAllocsUnknown
	__ret := C.cudaStreamSynchronize(cstream)
	runtime.KeepAlive(cstreamAllocMap)
	__v := (cudaErrorT)(__ret)
	return __v
}

// CudaStreamQuery function as declared in include/cuda_runtime_api.h:2817
func CudaStreamQuery(stream CUstreamSt) cudaErrorT {
	cstream, cstreamAllocMap := *(*C.struct_CUstream_st)(unsafe.Pointer(&stream)), cgoAllocsUnknown
	__ret := C.cudaStreamQuery(cstream)
	runtime.KeepAlive(cstreamAllocMap)
	__v := (cudaErrorT)(__ret)
	return __v
}

// CudaMalloc function as declared in include/cuda_runtime_api.h:5018
func CudaMalloc(devPtr []unsafe.Pointer, size uint64) cudaErrorT {
	cdevPtr, cdevPtrAllocMap := copyPPointerBytes((*sliceHeader)(unsafe.Pointer(&devPtr)))
	csize, csizeAllocMap := (C.size_t)(size), cgoAllocsUnknown
	__ret := C.cudaMalloc(cdevPtr, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(cdevPtrAllocMap)
	__v := (cudaErrorT)(__ret)
	return __v
}

// CudaFree function as declared in include/cuda_runtime_api.h:5184
func CudaFree(devPtr unsafe.Pointer) cudaErrorT {
	cdevPtr, cdevPtrAllocMap := devPtr, cgoAllocsUnknown
	__ret := C.cudaFree(cdevPtr)
	runtime.KeepAlive(cdevPtrAllocMap)
	__v := (cudaErrorT)(__ret)
	return __v
}

// CudaMemcpy function as declared in include/cuda_runtime_api.h:6389
func CudaMemcpy(dst unsafe.Pointer, src unsafe.Pointer, count uint64, kind C.enum_) cudaErrorT {
	cdst, cdstAllocMap := dst, cgoAllocsUnknown
	csrc, csrcAllocMap := src, cgoAllocsUnknown
	ccount, ccountAllocMap := (C.size_t)(count), cgoAllocsUnknown
	ckind, ckindAllocMap := (C.enum_)(kind), cgoAllocsUnknown
	__ret := C.cudaMemcpy(cdst, csrc, ccount, ckind)
	runtime.KeepAlive(ckindAllocMap)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(csrcAllocMap)
	runtime.KeepAlive(cdstAllocMap)
	__v := (cudaErrorT)(__ret)
	return __v
}

// CudaMemcpyAsync function as declared in include/cuda_runtime_api.h:6763
func CudaMemcpyAsync(dst unsafe.Pointer, src unsafe.Pointer, count uint64, kind C.enum_, stream CUstreamSt) cudaErrorT {
	cdst, cdstAllocMap := dst, cgoAllocsUnknown
	csrc, csrcAllocMap := src, cgoAllocsUnknown
	ccount, ccountAllocMap := (C.size_t)(count), cgoAllocsUnknown
	ckind, ckindAllocMap := (C.enum_)(kind), cgoAllocsUnknown
	cstream, cstreamAllocMap := *(*C.struct_CUstream_st)(unsafe.Pointer(&stream)), cgoAllocsUnknown
	__ret := C.cudaMemcpyAsync(cdst, csrc, ccount, ckind, cstream)
	runtime.KeepAlive(cstreamAllocMap)
	runtime.KeepAlive(ckindAllocMap)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(csrcAllocMap)
	runtime.KeepAlive(cdstAllocMap)
	__v := (cudaErrorT)(__ret)
	return __v
}

// CudaMemset function as declared in include/cuda_runtime_api.h:7107
func CudaMemset(devPtr unsafe.Pointer, value int32, count uint64) cudaErrorT {
	cdevPtr, cdevPtrAllocMap := devPtr, cgoAllocsUnknown
	cvalue, cvalueAllocMap := (C.int)(value), cgoAllocsUnknown
	ccount, ccountAllocMap := (C.size_t)(count), cgoAllocsUnknown
	__ret := C.cudaMemset(cdevPtr, cvalue, ccount)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cdevPtrAllocMap)
	__v := (cudaErrorT)(__ret)
	return __v
}

// CudaMemsetAsync function as declared in include/cuda_runtime_api.h:7223
func CudaMemsetAsync(devPtr unsafe.Pointer, value int32, count uint64, stream CUstreamSt) cudaErrorT {
	cdevPtr, cdevPtrAllocMap := devPtr, cgoAllocsUnknown
	cvalue, cvalueAllocMap := (C.int)(value), cgoAllocsUnknown
	ccount, ccountAllocMap := (C.size_t)(count), cgoAllocsUnknown
	cstream, cstreamAllocMap := *(*C.struct_CUstream_st)(unsafe.Pointer(&stream)), cgoAllocsUnknown
	__ret := C.cudaMemsetAsync(cdevPtr, cvalue, ccount, cstream)
	runtime.KeepAlive(cstreamAllocMap)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cdevPtrAllocMap)
	__v := (cudaErrorT)(__ret)
	return __v
}

// CudaMallocAsync function as declared in include/cuda_runtime_api.h:7971
func CudaMallocAsync(devPtr []unsafe.Pointer, size uint64, hStream CUstreamSt) cudaErrorT {
	cdevPtr, cdevPtrAllocMap := copyPPointerBytes((*sliceHeader)(unsafe.Pointer(&devPtr)))
	csize, csizeAllocMap := (C.size_t)(size), cgoAllocsUnknown
	chStream, chStreamAllocMap := *(*C.struct_CUstream_st)(unsafe.Pointer(&hStream)), cgoAllocsUnknown
	__ret := C.cudaMallocAsync(cdevPtr, csize, chStream)
	runtime.KeepAlive(chStreamAllocMap)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(cdevPtrAllocMap)
	__v := (cudaErrorT)(__ret)
	return __v
}

// CudaFreeAsync function as declared in include/cuda_runtime_api.h:7997
func CudaFreeAsync(devPtr unsafe.Pointer, hStream CUstreamSt) cudaErrorT {
	cdevPtr, cdevPtrAllocMap := devPtr, cgoAllocsUnknown
	chStream, chStreamAllocMap := *(*C.struct_CUstream_st)(unsafe.Pointer(&hStream)), cgoAllocsUnknown
	__ret := C.cudaFreeAsync(cdevPtr, chStream)
	runtime.KeepAlive(chStreamAllocMap)
	runtime.KeepAlive(cdevPtrAllocMap)
	__v := (cudaErrorT)(__ret)
	return __v
}
